security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
      algorithm: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # users_in_memory: { memory: null }
    # Start JWT
    users:
      entity:
        class: App\Entity\User
        property: email
    # End JWT
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      # provider: users_in_memory
      # Start JWT
      provider: users
      stateless: true
      json_login:
        check_path: auth
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
      jwt: ~
      # End JWT
      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # Start JWT
    - { path: ^/auth, roles: PUBLIC_ACCESS }
    - { path: ^/api/users/createAccount, roles: PUBLIC_ACCESS }
    - { path: ^/api/users/mailReset, roles: PUBLIC_ACCESS }
    - { path: ^/api/users/resetPassword, roles: PUBLIC_ACCESS }
    - { path: ^/api/users, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/recipes, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/ingredients, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/steps, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api, roles: PUBLIC_ACCESS }
    # End JWT

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
